/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userinterface.Distributor;

import TheBusiness.Ecosystems;
import TheBusiness.Enterprise.HospitalEnterprise;
import TheBusiness.NationalEnterprise.Distributor;
import TheBusiness.Network.StateNetwork;
import TheBusiness.OrderManagement.OrderItem;
import TheBusiness.Organization.CDCOrganization;
import TheBusiness.Organization.DistributorOrganization;
import TheBusiness.Organization.HospitalOrganization;
import TheBusiness.Organization.Organization;
import TheBusiness.Organization.LocalHealthDptImmuneOrganization;
import TheBusiness.UserAccountManagement.UserAccount;
import TheBusiness.VaccineManagement.VaccineDetails;
import TheBusiness.WarehouseManagement.Warehouse;
import TheBusiness.WorkOrderQueue.ProviderOrderRequest;
import TheBusiness.WorkOrderQueue.ShippingOrderWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author soham
 */
public class AsRequestedAndShipDetails extends javax.swing.JPanel {

 
    private JPanel workContainer;
    
    private Distributor distributorEnterprise;
    
    private UserAccount userAccount;
    private Ecosystems business;
    private ProviderOrderRequest request;
    private boolean flag;
    
    public AsRequestedAndShipDetails(JPanel workContainer, UserAccount userAccount,Ecosystems business, ProviderOrderRequest request, Distributor distributorEnterprise) {
        initComponents();
        this.workContainer = workContainer;
        this.userAccount = userAccount;
        this.business = business;
        this.request = request;
        this.distributorEnterprise = distributorEnterprise;
        calculateTotalCostOfOrder();
        populateOrderTable();
        flag = false;
     
    }
    
     private void calculateTotalCostOfOrder(){
        
        double total = 0;
        for(OrderItem oi : request.getVaccineOrder().getItemList())
        {
            total = total + (oi.getVaccineDetails().getVaccinePrice()*oi.getQuantity());
        }
        txtTotalCostOfOrder.setText(String.valueOf(total));
    }
     
     private void populateOrderTable(){
        
         int rowCount = tblorder.getRowCount();
        DefaultTableModel defaulttabelmodel = (DefaultTableModel)tblorder.getModel();
        
        for(int i=rowCount-1 ; i>=0; i--){
            defaulttabelmodel.removeRow(i);
        }
        
        for(OrderItem oi: request.getVaccineOrder().getItemList())
        {
            Object[] row = new Object[9];
            
                row[0] = oi.getVaccineDetails();
                row[1] = oi;
                row[2] = oi.getVaccineDetails().getManufacturerName();
                row[3] = oi.getVaccineDetails().getVaccineId();
                row[4] = oi.getVaccineDetails().getBatchId();
                row[5] = oi.getVaccineDetails().getVaccinePrice();
                row[6] = oi.getQuantity();
                row[7] = oi.getVaccineDetails().getManufactureDate();
                row[8] = oi.getVaccineDetails().getVaccinePrice()*oi.getQuantity();

                defaulttabelmodel.addRow(row);
            
            
            
            
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        txtTotalCostOfOrder = new javax.swing.JTextField();
        txtOrderNumber = new javax.swing.JTextField();
        btnCheckInventory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblorder = new javax.swing.JTable();
        lblOrderParticulars = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblinven = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        lblInventoryCheck = new javax.swing.JLabel();
        btnShipOrder = new javax.swing.JButton();
        lblTotalCostOfOrder = new javax.swing.JLabel();
        lblOrderNumber = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(70, 130, 180));

        lblTitle.setFont(new java.awt.Font("October Compressed Devanagari", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View order and ship");

        txtTotalCostOfOrder.setEnabled(false);

        txtOrderNumber.setEnabled(false);

        btnCheckInventory.setBackground(new java.awt.Color(0, 0, 0));
        btnCheckInventory.setFont(new java.awt.Font("October Compressed Devanagari", 1, 18)); // NOI18N
        btnCheckInventory.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckInventory.setText("Check Inventory");
        btnCheckInventory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheckInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInventoryActionPerformed(evt);
            }
        });

        tblorder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Code", "Vaccine Name", "Brand", "Vaccine id", "Batch ID", "Price", "Quantity", "manufacture date", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblorder.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblorder);

        lblOrderParticulars.setFont(new java.awt.Font("October Compressed Devanagari", 1, 18)); // NOI18N
        lblOrderParticulars.setForeground(new java.awt.Color(255, 255, 255));
        lblOrderParticulars.setText("Order Particulars:");

        tblinven.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Code", "Vaccine Name", "Brand", "Warehouse Id", "Warehouse Location", "Vaccine Id", "BatchID", "Vaccines in Inventory", "Available?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblinven.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblinven);

        lblInventoryCheck.setFont(new java.awt.Font("October Compressed Devanagari", 1, 18)); // NOI18N
        lblInventoryCheck.setForeground(new java.awt.Color(255, 255, 255));
        lblInventoryCheck.setText("Inventory Check:");

        btnShipOrder.setBackground(new java.awt.Color(0, 0, 0));
        btnShipOrder.setFont(new java.awt.Font("October Compressed Devanagari", 1, 18)); // NOI18N
        btnShipOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnShipOrder.setText("Ship order");
        btnShipOrder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnShipOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShipOrderActionPerformed(evt);
            }
        });

        lblTotalCostOfOrder.setFont(new java.awt.Font("October Compressed Devanagari", 0, 14)); // NOI18N
        lblTotalCostOfOrder.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalCostOfOrder.setText("Total Cost of the Order:");

        lblOrderNumber.setFont(new java.awt.Font("October Compressed Devanagari", 0, 14)); // NOI18N
        lblOrderNumber.setForeground(new java.awt.Color(255, 255, 255));
        lblOrderNumber.setText("Order Number:");

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/ICONS/11122021icons/MicrosoftTeams-image (1).png"))); // NOI18N
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInventoryCheck)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrderNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblTotalCostOfOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalCostOfOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnCheckInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOrderParticulars)
                            .addComponent(btnShipOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTotalCostOfOrder)
                        .addComponent(txtTotalCostOfOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblOrderNumber)
                        .addComponent(txtOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblOrderParticulars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCheckInventory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInventoryCheck)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShipOrder)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInventoryActionPerformed
        // TODO add your handling code here:
        int rowCount = tblinven.getRowCount();
        DefaultTableModel defaulttabelmodel = (DefaultTableModel)tblinven.getModel();

        for(int i=rowCount-1 ; i>=0; i--){
            defaulttabelmodel.removeRow(i);
        }

        String vaccineCode = null;
        String manufacturer = null;
        String batchId = null;
        DistributorOrganization distOrg = null;

        int count =0;

        for(OrderItem oi : request.getVaccineOrder().getItemList())
        {
            vaccineCode = oi.getVaccineDetails().getVaccineDefinition().getVaccineCode();
            manufacturer = oi.getVaccineDetails().getManufacturerName();
            batchId = oi.getVaccineDetails().getBatchId();


            for(Organization org: distributorEnterprise.getOrganizationDirectory().getOrganizationList())
            {
                if(org instanceof DistributorOrganization)
                {
                    distOrg = (DistributorOrganization) org;
                    for(Warehouse warehouse: distOrg.getWarehouseDir().getWarehouseList())
                    {
                        for(VaccineDetails product: warehouse.getVaccineInventoryList())
                        {
                            if(product.getVaccineDefinition().getVaccineCode().equalsIgnoreCase(vaccineCode) && product.getManufacturerName().equalsIgnoreCase(manufacturer)&& product.getBatchId().equals(batchId))// && product.getVaccineId() == oi.getVaccineDetails().getVaccineId() )
                            {   
                                if(product.getAvailablity()>0)
                                {count++;
                                flag = true;
                                Object[] row = new Object[9];

                                row[0] = product;
                                row[1] = product.getVaccineDefinition().getVaccineName();
                                row[2] = product.getManufacturerName();
                                row[3] = warehouse;
                                row[4] = warehouse.getLocation();
                                row[5] = product.getVaccineId();
                                row[6] = product.getBatchId();
                                row[7] = product.getAvailablity();
                                row[8] = "Yes";

                                defaulttabelmodel.addRow(row);
                                }
                                else
                                {
                                    String msg = new String("Not Enough quantity of "+ product);
                                        JOptionPane.showMessageDialog(null, msg);
                                        return;
                                    
                                }
                            }
                        }
                    }

                }

            }

        }

        if(count==0)
        {
            JOptionPane.showMessageDialog(null, "Vaccine are out of Stock Inventory!");
            return;
        }

        //populate the table

    }//GEN-LAST:event_btnCheckInventoryActionPerformed

    private void btnShipOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShipOrderActionPerformed
        // TODO add your handling code here:
 if(request.getStatus().equalsIgnoreCase("Shipped"))
        {
             JOptionPane.showMessageDialog(null, "Order already Shipped!");
            return;
        }
      
        if(flag== false)
        {
            JOptionPane.showMessageDialog(null, "Vaccine are out of Stock Inventory!");
            return;
        }
        flag = false;


        ShippingOrderWorkRequest shipRequest = new ShippingOrderWorkRequest();
        shipRequest.setVaccineOrder(request.getVaccineOrder());
        shipRequest.setShippingDate(new Date());
        shipRequest.setSender(userAccount);
        shipRequest.setStatus("Shipped");


        request.setReceiver(userAccount);
        request.setStatus("Shipped");
        request.setResolveDate(new Date());
     
        String vaccineCode = null;
        String manufacturer = null;
        DistributorOrganization distOrg = null;

        String batchID = null;
        boolean warehouseFlag = false;
        

        for(OrderItem oi : request.getVaccineOrder().getItemList())
        {   warehouseFlag= false;
            vaccineCode = oi.getVaccineDetails().getVaccineDefinition().getVaccineCode();
            manufacturer = oi.getVaccineDetails().getManufacturerName();
            batchID = oi.getVaccineDetails().getBatchId();
   
            for(Organization org: distributorEnterprise.getOrganizationDirectory().getOrganizationList())
            {
                if(org instanceof DistributorOrganization)
                {
                    distOrg = (DistributorOrganization) org;
                    for(Warehouse warehouse: distOrg.getWarehouseDir().getWarehouseList())
                    {   if(warehouseFlag == false)
                        {

                            for(VaccineDetails product: warehouse.getVaccineInventoryList())
                            {
                                if(product.getVaccineDefinition().getVaccineCode().equalsIgnoreCase(vaccineCode) && product.getManufacturerName().equalsIgnoreCase(manufacturer) && product.getBatchId().equals(batchID))// && product.getVaccineId() == vaccineId)
                                {
                                    if(product.getAvailablity()>0)
                                    {product.setAvailablity(product.getAvailablity()-oi.getQuantity());
                                    shipRequest.getShipOrder().addNewOrderItem(oi.getQuantity(), product);
                                    warehouseFlag = true;

                                    break;
                                    }
                                    else
                                    {   String msg = new String("Not Enough quantity of "+ product);
                                        JOptionPane.showMessageDialog(null, msg);
                                        return;
                                    }
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }

                }

            }

        }

        //get the provider and insert it in his work queue
        HospitalOrganization hospOrg = null;
        for(Organization org: request.getEnterprise().getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof HospitalOrganization)
            {
                hospOrg = (HospitalOrganization)org;
                hospOrg.getWorkQueue().addWorkRequest(shipRequest);

            }

        }
        JOptionPane.showMessageDialog(null, "Order Shipped!");
        
//        RequestPayment();

    }//GEN-LAST:event_btnShipOrderActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workContainer.remove(this);
        CardLayout layout = (CardLayout) workContainer.getLayout();
        layout.previous(workContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckInventory;
    private javax.swing.JButton btnShipOrder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblInventoryCheck;
    private javax.swing.JLabel lblOrderNumber;
    private javax.swing.JLabel lblOrderParticulars;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalCostOfOrder;
    private javax.swing.JTable tblinven;
    private javax.swing.JTable tblorder;
    private javax.swing.JTextField txtOrderNumber;
    private javax.swing.JTextField txtTotalCostOfOrder;
    // End of variables declaration//GEN-END:variables
}
